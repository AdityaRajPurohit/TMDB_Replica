{"version":3,"sources":["MovieRow.js","App.js","registerServiceWorker.js","index.js"],"names":["MovieRow","url","this","props","movie","id","window","location","href","react_default","a","createElement","key","alt","width","src","poster_src","title","overview","className","type","onClick","viewMovie","bind","value","React","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","performSearch","searchTerm","_this2","console","log","urlString","$","ajax","success","searchResults","results","movieRows","forEach","poster_path","movieRow","src_MovieRow","push","setState","rows","error","xhr","status","err","event","target","height","style","fontSize","display","paddingTop","paddingBottom","paddingLeft","borderRadius","onChange","searchChangeHandler","placeholder","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.619b027f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nclass MovieRow extends React.Component {\r\n  viewMovie() {\r\n    // console.log(\"Trying to view movie\")\r\n    // console.log(this.props.movie.title)\r\n    const url = \"https://www.themoviedb.org/movie/\" + this.props.movie.id\r\n    window.location.href = url\r\n  }\r\n\r\n  render() {\r\n    return <table key={this.props.movie.id}>\r\n    <tbody>\r\n      <tr>\r\n        <td>\r\n          <img alt=\"poster\" width=\"120\" src={this.props.movie.poster_src}/>\r\n        </td>\r\n        <td>\r\n          <h3>{this.props.movie.title}</h3>\r\n          <p>{this.props.movie.overview}</p>\r\n          <input className=\"button1\" type=\"button\" onClick={this.viewMovie.bind(this)} value=\"View\"/>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n  }\r\n}\r\n\r\nexport default MovieRow","import React, { Component } from 'react';\nimport './App.css';\nimport MovieRow from './MovieRow.js'\nimport $ from 'jquery'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {}\n\n\n    this.performSearch(\"ant man\")\n  }\n\n  performSearch(searchTerm) {\n    console.log(\"Perform search using moviedb\")\n    const urlString = \"https://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query=\" + searchTerm\n    $.ajax({\n      url: urlString,\n      success: (searchResults) => {\n        console.log(\"Fetched data successfully\")\n\n        const results = searchResults.results\n \n\n        var movieRows = []\n\n        results.forEach((movie) => {\n          movie.poster_src = \"https://image.tmdb.org/t/p/w185\" + movie.poster_path\n          // console.log(movie.poster_path)\n          const movieRow = <MovieRow key={movie.id} movie={movie}/>\n          movieRows.push(movieRow)\n        })\n\n        this.setState({rows: movieRows})\n      },\n      error: (xhr, status, err) => {\n        console.error(\"Failed to fetch data\")\n      }\n    })\n  }\n\n  searchChangeHandler(event) {\n    console.log(event.target.value)\n    const boundObject = this\n    const searchTerm = event.target.value\n    boundObject.performSearch(searchTerm)\n  }\n\n  render() {\n    return (\n      <div>\n        \n        <table className=\"titleBar\">\n          <tbody>\n            <tr>\n              <td>\n                <img alt=\"app icon\" width=\"150\" height=\"75\" src=\"icon.svg\"/>\n              </td>\n              <td width=\"8\"/>\n              <td>\n                <h1>MoviesDB Search</h1>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n\n        <input style={{\n          fontSize: 24,\n          display: 'block',\n          width: \"99%\",\n          paddingTop: 8,\n          paddingBottom: 8,\n          paddingLeft: 16,\n          borderRadius: 12\n        }} onChange={this.searchChangeHandler.bind(this)} placeholder=\"Enter search term\"/>\n\n        {this.state.rows}\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n  \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n   \n        checkValidServiceWorker(swUrl);\n\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n \n              console.log('New content is available; please refresh.');\n            } else {\n    \n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n \n  fetch(swUrl)\n    .then(response => {\n     \n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n       \n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n  \n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}